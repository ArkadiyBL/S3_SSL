// + #s3 Иванов А.Б. 12.01.2021
Функция ПолныйПутьТома(СсылкаНаТом) Экспорт
	
	СтрокаПутьТома = ""
		+ СсылкаНаТом.s3_АдресХранилища
		+ "/"
		// + #s3 Иванов А.Б. 12.01.2021
		//+ СсылкаНаТом.s3_ИмяПрефикса
		//+ "/"
		// - #s3 Иванов А.Б. 12.01.2021
		;

	Возврат СтрокаПутьТома;
	
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ДобавитьКонечныйРазделительПутиS3(Знач ПутьКаталога) Экспорт
	
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = "/";
	
	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
	
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ПолучитьУникальноеИмяСПутем(ДопПараметры) Экспорт 
	
	СсылкаНаТом = ДопПараметры.СсылкаНаТом;
	ПутьКТому = ДопПараметры.ПутьКТому;
	ПутьДня = ДопПараметры.ПутьДня;	
	ВерсияСсылка = ДопПараметры.ВерсияСсылка;	
	Расширение = ДопПараметры.Расширение;
	//ИмяФайла = ДопПараметры.ИмяФайла;
	НомерВерсии = ДопПараметры.НомерВерсии;
	
	Если НЕ ЗначениеЗаполнено(ВерсияСсылка) Тогда
		СтрокаИсключения = НСтр("ru = 'Не заполнена версия ссылка при помещении файла в S3'");
		ВызватьИсключение(СтрокаИсключения);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияСсылка.ПутьКФайлу) Тогда
		РезультирующийПуть = ВерсияСсылка.ПутьКФайлу;
		Возврат РезультирующийПуть;
	КонецЕсли;
		
	УникальныйИдентификаторСтрока = Строка(ВерсияСсылка.UUID());

	пТекстНомерВерсии = "";
	Если ЗначениеЗаполнено(НомерВерсии) Тогда
		пТекстНомерВерсии = "_" + НомерВерсии;
	КонецЕсли;
	
	РезультирующийПуть = ""
		// + #s3 Иванов А.Б. 12.01.2021
		+ СсылкаНаТом.s3_ИмяПрефикса
		+ "/"		                                                                        
		// - #s3 Иванов А.Б. 12.01.2021
		+ ПутьДня
		+ УникальныйИдентификаторСтрока 
		+ пТекстНомерВерсии
		+ "."
		+ Расширение;
		
	Возврат РезультирующийПуть;
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ЭтоТипХранилища_ОбъектноеS3(СсылкаНаТом) Экспорт 
	пЭтоТипХранилища_ОбъектноеS3 = Ложь;
	
	Если СсылкаНаТом.s3_ТипХранилища = ПредопределенноеЗначение(
		"Перечисление.s3_ТипыХранилищ.ОбъектноеS3") Тогда
		пЭтоТипХранилища_ОбъектноеS3 = Истина;	
	КонецЕсли;
	
	Возврат пЭтоТипХранилища_ОбъектноеS3;
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ДанныеАутентификации(СсылкаНаТом) Экспорт 
	
	Аутентификация = Новый Структура;
	Аутентификация.Вставить("Тип", "AWS4-HMAC-SHA256");
	Аутентификация.Вставить("ИдентификаторКлючаДоступа", СсылкаНаТом.s3_ИдентификаторКлючаДоступа);
	Аутентификация.Вставить("СекретныйКлюч", СсылкаНаТом.s3_СекретныйКлюч);
	Аутентификация.Вставить("Регион", СсылкаНаТом.s3_Регион);
	Аутентификация.Вставить("Сервис", "s3");
	
	Возврат Аутентификация;
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция РазрешеноСохранитьФайлНаДискS3(СсылкаНаТом) Экспорт 
	РазрешеноСохранитьФайлНаДискS3 = Ложь;
	
	СтрокаИсключения = "";
	
	ЭтоРабочаяБаза = s3_ЭтоРабочаяБаза();
	
	s3_ИмяПрефиксаРабочаяБаза = СсылкаНаТом.s3_ИмяПрефиксаРабочаяБаза;
	s3_ИмяПрефикса = СсылкаНаТом.s3_ИмяПрефикса;
	
	Если ЭтоРабочаяБаза Тогда
		
		Если s3_ИмяПрефикса = s3_ИмяПрефиксаРабочаяБаза Тогда
			
			РазрешеноСохранитьФайлНаДискS3 = Истина;
			
		Иначе
			
			РазрешеноСохранитьФайлНаДискS3 = Ложь;
			
			СтрокаИсключения = НСтр("ru = '
				|
				|Ошибка! Запрещено отправлять файлы из рабочей базы в каталог s3 тестовой базы.'"); 
			
		КонецЕсли;
		
	Иначе
		
		Если s3_ИмяПрефикса <> s3_ИмяПрефиксаРабочаяБаза Тогда
			
			РазрешеноСохранитьФайлНаДискS3 = Истина;
			
		Иначе
			
			РазрешеноСохранитьФайлНаДискS3 = Ложь;
			
			СтрокаИсключения = НСтр("ru = '
				|
				|Ошибка! Запрещено отправлять файлы из копии базы в каталог s3 рабочей базы.'"); 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РазрешеноСохранитьФайлНаДискS3 Тогда
		
		СтрокаИсключения = СтрокаИсключения + 
			НСтр("ru = 'Необходимо в справочнике «Томы хранения файлов» указать другое значение реквизита 
				|""Имя префикса"" для тома [%1]
				|
				|
				|'");
			
		СтрокаИсключения = СтрШаблон(СтрокаИсключения,СсылкаНаТом);	
		
	КонецЕсли;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("РазрешеноСохранитьФайлНаДискS3",РазрешеноСохранитьФайлНаДискS3);
	РезультатФункции.Вставить("СтрокаИсключения",СтрокаИсключения);
	
	Возврат РезультатФункции;
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Процедура ДобавитьФайлНаДискS3(СсылкаНаТом, ДвоичныеДанные, ПолныйПуть) Экспорт
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
	//	ДвоичныеДанные.Записать(ПолноеИмяФайлаСПутем);
	ИначеЕсли ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда // считаем, что иначе это путь к файлу на диске
		// + #s3 Иванов А.Б. 12.01.2021
		ПолныйПутьНаДискеS3ИзДвоичныхДанных = ДвоичныеДанные;
		ДвоичныеДанные = ПолучитьДвоичныеДанныеФайлаИзS3(СсылкаНаТом, ПолныйПутьНаДискеS3ИзДвоичныхДанных);                                                                        
		// - #s3 Иванов А.Б. 12.01.2021
	//	КопироватьФайл(ДвоичныеДанные, ПолноеИмяФайлаСПутем);
	Иначе
		СтрокаИсключения = НСтр("ru = 'Неверный тип данных для добавления на том S3'");
		ВызватьИсключение(СтрокаИсключения);
	КонецЕсли;

	// + #s3 Иванов А.Б. 12.01.2021
	РезультатПроверки = РазрешеноСохранитьФайлНаДискS3(СсылкаНаТом);
	Если НЕ РезультатПроверки.РазрешеноСохранитьФайлНаДискS3 Тогда 
		ВызватьИсключение(РезультатПроверки.СтрокаИсключения);		
	КонецЕсли;                                                                        
	// - #s3 Иванов А.Б. 12.01.2021
	
	Аутентификация = ДанныеАутентификации(СсылкаНаТом);
	
	Заголовки = Новый Соответствие;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация);
	ДополнительныеПараметры.Вставить("Таймаут", 300);
	
	Ответ = s3_КоннекторHTTP.Put(ПолныйПуть, ДвоичныеДанные, ДополнительныеПараметры);
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		// + #s3 Иванов А.Б. 12.02.2021
		//СтрокаИсключения = НСтр("ru = 'Не удалось добавить файл на диск S3 %1 '");
		//СтрокаИсключения = СтрШаблон(СтрокаИсключения,ПолныйПуть);		
		//ВызватьИсключение(СтрокаИсключения);
		ТекстОтвета = s3_КоннекторHTTP.КакТекст(Ответ);
		
		ТекстСообщения = НСтр("ru = 'Ошибка! Не удалось добавить файл на диск S3 [%1]
			|КодСостояния [%2]
			|Текст ответа [%3]'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, 
			ПолныйПуть, 
			Ответ.КодСостояния,
			ТекстОтвета);
		
		ДобавитьЗаписьВЖурналРегистрации(ТекстСообщения,
			ИмяСобытияДляЖР_S3(),
			УровеньЖурналаРегистрации.Ошибка);
			
		ВызватьИсключение(ТекстСообщения);
		// - #s3 Иванов А.Б. 12.02.2021

	КонецЕсли;
	
КонецПроцедуры // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.02.2021
Функция ИмяСобытияДляЖР_S3() 
	Возврат "DiskS3";
КонецФункции // - #s3 Иванов А.Б. 12.02.2021

// + #s3 Иванов А.Б. 12.02.2021
Процедура ДобавитьЗаписьВЖурналРегистрации(ТекстСообщения, ИмяСобытияДляЖР, УровеньЖР)
	
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
		ИмяСобытияДляЖР, 
		УровеньЖР,
		,
		,
		ТекстСообщения);	
	
КонецПроцедуры // - #s3 Иванов А.Б. 12.02.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ФайлНаДискеS3Существует(СсылкаНаТом, ПолныйПуть) Экспорт 
	пФайлНаДискеS3Существует = Ложь;
	
	Аутентификация = ДанныеАутентификации(СсылкаНаТом);	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация);
	
	Ответ = s3_КоннекторHTTP.Head(ПолныйПуть, ДополнительныеПараметры);
	
	Если Ответ.КодСостояния = 200 Тогда
		пФайлНаДискеS3Существует = Истина;
	КонецЕсли;
	
	Возврат пФайлНаДискеS3Существует;
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ФайлСуществуетВТоме(СсылкаНаТом, ПолныйПуть) Экспорт
	пФайлСуществуетВТоме = Ложь;
	
	Если ЭтоТипХранилища_ОбъектноеS3(СсылкаНаТом) Тогда
		пФайлСуществуетВТоме = ФайлНаДискеS3Существует(СсылкаНаТом, ПолныйПуть);	
	Иначе
		Файл = Новый Файл(ПолныйПуть);
		пФайлСуществуетВТоме = Файл.Существует();
	КонецЕсли;
				
	Возврат пФайлСуществуетВТоме;
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ПолучитьДвоичныеДанныеФайла(СсылкаНаТом, ПолныйПуть) Экспорт 
	
	Если s3_API.ЭтоТипХранилища_ОбъектноеS3(СсылкаНаТом) Тогда
		
		Возврат ПолучитьДвоичныеДанныеФайлаИзS3(СсылкаНаТом, ПолныйПуть);
		
	Иначе
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
		Возврат ДвоичныеДанные; 
		
	КонецЕсли;		
	
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ПолучитьДвоичныеДанныеФайлаИзS3(СсылкаНаТом, ПолныйПуть) Экспорт
	
	Аутентификация = ДанныеАутентификации(СсылкаНаТом);	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация);
	
	Ответ = s3_КоннекторHTTP.Get(ПолныйПуть,, ДополнительныеПараметры);
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		// + #s3 Иванов А.Б. 12.02.2021
		//СтрокаИсключения = НСтр("ru = 'Не удалось получить данные файла с диска S3 %1'");
		//СтрокаИсключения = СтрШаблон(СтрокаИсключения,ПолныйПуть);
		//ВызватьИсключение(ТекстСообщения);
		ТекстОтвета = s3_КоннекторHTTP.КакТекст(Ответ);
		
		ТекстСообщения = НСтр("ru = 'Ошибка! Не удалось получить данные файла с диска S3 [%1]
			|КодСостояния [%2]
			|Текст ответа [%3]'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, 
			ПолныйПуть, 
			Ответ.КодСостояния,
			ТекстОтвета);
		
		ДобавитьЗаписьВЖурналРегистрации(ТекстСообщения,
			ИмяСобытияДляЖР_S3(),
			УровеньЖурналаРегистрации.Ошибка);		                                                                        
			
		ВызватьИсключение(ТекстСообщения);	
		// - #s3 Иванов А.Б. 12.02.2021		
		
	КонецЕсли;
	
	ДвоичныеДанные = Ответ.Тело;
	
	Возврат ДвоичныеДанные;
	
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция УдалитьФайлСТома(СсылкаНаТом, ПолныйПуть) Экспорт
	
	Если s3_API.ЭтоТипХранилища_ОбъектноеS3(СсылкаНаТом) Тогда
		УдалитьФайлСДискаS3(СсылкаНаТом, ПолныйПуть);
	Иначе						
		РаботаСФайламиСлужебныйВызовСервера.УдалитьФайл(ПолныйПуть);	
	КонецЕсли;
	
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция УдалитьФайлСДискаS3(СсылкаНаТом, ПолныйПуть) Экспорт 
	
	// + #s3 Иванов А.Б. 09.02.2021
	РезультатПроверки = РазрешеноСохранитьФайлНаДискS3(СсылкаНаТом);
	Если НЕ РезультатПроверки.РазрешеноСохранитьФайлНаДискS3 Тогда 
		ВызватьИсключение(РезультатПроверки.СтрокаИсключения);		
	КонецЕсли;                                                                        
	// - #s3 Иванов А.Б. 09.02.2021	
	
	Аутентификация = ДанныеАутентификации(СсылкаНаТом);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация);
	
	Ответ = s3_КоннекторHTTP.Delete(ПолныйПуть,,ДополнительныеПараметры);
	
	Если Ответ.КодСостояния <> 204
		// + #s3 Иванов А.Б. 12.02.2021
		//И Ответ.КодСостояния <> 404                                                                         
		// - #s3 Иванов А.Б. 12.02.2021
		Тогда

		// + #s3 Иванов А.Б. 12.02.2021
		//СтрокаИсключения = НСтр("ru = 'Не удалось удалить файл с диска S3 %1'");
		//СтрокаИсключения = СтрШаблон(СтрокаИсключения, ПолныйПуть);
		//ВызватьИсключение(СтрокаИсключения);
		
		ТекстОтвета = s3_КоннекторHTTP.КакТекст(Ответ);
		
		ТекстСообщения = НСтр("ru = 'Ошибка! Не удалось удалить файл с диска S3 [%1]
			|КодСостояния [%2]
			|Текст ответа [%3]'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, 
			ПолныйПуть, 
			Ответ.КодСостояния,
			ТекстОтвета);
		
		ДобавитьЗаписьВЖурналРегистрации(ТекстСообщения,
			ИмяСобытияДляЖР_S3(),
			УровеньЖурналаРегистрации.Ошибка);		                                                                        
			
		ВызватьИсключение(ТекстСообщения);			                                                                        
		// - #s3 Иванов А.Б. 12.02.2021
		
	КонецЕсли;
	
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ПолучитьСписокФайловСДискаS3(СсылкаНаТом) Экспорт
	
	ТаблицаФайловНаДиске = ПолучитьОписаниеТаблицаФайловНаДиске();
	
	ContinuationToken = Неопределено;
	IsTruncated = Истина;
	
	Пока IsTruncated Цикл
		
		ВТДопПараметры = Новый Структура();
		ВТДопПараметры.Вставить("СсылкаНаТом", СсылкаНаТом);
		ВТДопПараметры.Вставить("ContinuationToken", ContinuationToken);
		
		РезультатОтвета = ПолучитьСписокФайловСДискаS3_Пачка(ВТДопПараметры, ТаблицаФайловНаДиске);
		
		IsTruncated = РезультатОтвета.IsTruncated;
		ContinuationToken = РезультатОтвета.NextContinuationToken;
		
	КонецЦикла;
	
	Возврат ТаблицаФайловНаДиске;
	
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ПолучитьСписокФайловСДискаS3_Пачка(ДопПараметры, ТаблицаФайловНаДиске) 
	
	NextContinuationToken = Неопределено;
	IsTruncated = Ложь;
	
	СсылкаНаТом = ДопПараметры.СсылкаНаТом;
	ContinuationToken = ДопПараметры.ContinuationToken;
	
	Аутентификация = ДанныеАутентификации(СсылкаНаТом);	
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept-Encoding","identity");

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);	
	ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация);	
		
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("list-type", "2");	
	ПараметрыЗапроса.Вставить("prefix", СсылкаНаТом.s3_ИмяПрефикса);	
	Если ЗначениеЗаполнено(ContinuationToken) Тогда
		ПараметрыЗапроса.Вставить("continuation-token", ContinuationToken);	
	КонецЕсли;
	
	ПутьКБакету = СсылкаНаТом.s3_АдресХранилища;
	ЗапросСписокФайлов = ПутьКБакету;                                                                        
	Ответ = s3_КоннекторHTTP.Get(ЗапросСписокФайлов,ПараметрыЗапроса, ДополнительныеПараметры);

	Если Ответ.КодСостояния <> 200 Тогда
		
		// + #s3 Иванов А.Б. 12.02.2021		
		ТекстОтвета = s3_КоннекторHTTP.КакТекст(Ответ);
		
		ТекстСообщения = НСтр("ru = 'Ошибка! Не удалось получить спискок файлов с диска S3 [%1]
			|КодСостояния [%2]
			|Текст ответа [%3]'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, 
			ПутьКБакету, 
			Ответ.КодСостояния,
			ТекстОтвета);
		
		ДобавитьЗаписьВЖурналРегистрации(ТекстСообщения,
			ИмяСобытияДляЖР_S3(),
			УровеньЖурналаРегистрации.Ошибка);		                                                                        
			
		ВызватьИсключение(ТекстСообщения);			                                                                        
		// - #s3 Иванов А.Б. 12.02.2021
		
	КонецЕсли;
		
	ДвоичныеДанные = Ответ.Тело;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЕстьОшибка = Ложь;
	СтрокаИсключения = "";
	Попытка
	
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		ФайлОтветаXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);				
		
	Исключение
		
		ЕстьОшибка = Истина;
		СтрокаИсключения = НСтр("ru = 'Не удалось прочитать XML ответ список файлов с диска S3 %1 ОписаниеОшибки %2'");
		СтрокаИсключения = СтрШаблон(СтрокаИсключения, ПутьКБакету, ОписаниеОшибки());
			
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	РаботаСФайламиСлужебныйВызовСервера.УдалитьФайл(ИмяВременногоФайла);
	
	Если ЕстьОшибка Тогда
		ВызватьИсключение(СтрокаИсключения);
	КонецЕсли;

	IsTruncated = XMLЗначение(Тип("Булево"), ФайлОтветаXML.IsTruncated);
	Если IsTruncated Тогда
		NextContinuationToken = ФайлОтветаXML.NextContinuationToken;	
	КонецЕсли;
	
	пПутьКТому = ПутьКБакету;
	пПолныйПутьТомаСПрефиксом = ПолныйПутьТома(СсылкаНаТом) + СсылкаНаТом.s3_ИмяПрефикса + "/";
	ДлинаПутиТомаСПрефиксом = СтрДлина(пПолныйПутьТомаСПрефиксом);
	
	Для Каждого СтрокаContents Из ФайлОтветаXML.Contents Цикл
		
		пПутьКФайлу = СтрокаContents.Key;
		пПолноеИмя = пПутьКТому + "/" + пПутьКФайлу; 
		пРазмер = Число(СтрокаContents.Size);
		
		пПолныйПутьТомаСПрефиксомИзФайла = Лев(пПолноеИмя,ДлинаПутиТомаСПрефиксом); 
		Если пПолныйПутьТомаСПрефиксом <> пПолныйПутьТомаСПрефиксомИзФайла Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаФайловНаДиске.Добавить();
		//НоваяСтрока.Имя = Файл.Имя;
		//НоваяСтрока.ИмяБезРасширения = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолноеИмя = пПолноеИмя;
		НоваяСтрока.Путь = пПутьКФайлу;
		//НоваяСтрока.Расширение = Файл.Расширение;
		//НоваяСтрока.ВремяИзменения = Файл.ПолучитьВремяИзменения();
		// + #s3 Иванов А.Б. 12.01.2021
		//НоваяСтрока.Размер = пРазмер;                                                                        
		НоваяСтрока.РазмерВТомеХраненияФайлов = пРазмер;
		// - #s3 Иванов А.Б. 12.01.2021
		НоваяСтрока.СтатусПроверки = НСтр("ru = 'Лишние файлы (есть на диске, но сведения о них отсутствуют)'");
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Том = СсылкаНаТом;
			
	КонецЦикла;
	
	//Возврат ТаблицаФайловНаДиске;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("NextContinuationToken",NextContinuationToken);
	РезультатФункции.Вставить("IsTruncated", IsTruncated);
	
	Возврат РезультатФункции;
	
	
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция ПолучитьОписаниеТаблицаФайловНаДиске() Экспорт
	
	ТаблицаФайловНаДиске = Новый ТаблицаЗначений;
	ТаблицаФайловНаДиске.Колонки.Добавить("Имя");
	ТаблицаФайловНаДиске.Колонки.Добавить("Файл");
	ТаблицаФайловНаДиске.Колонки.Добавить("Ссылка");
	ТаблицаФайловНаДиске.Колонки.Добавить("ИмяБезРасширения");
	ТаблицаФайловНаДиске.Колонки.Добавить("ПолноеИмя");
	ТаблицаФайловНаДиске.Колонки.Добавить("Путь");
	ТаблицаФайловНаДиске.Колонки.Добавить("Том");
	ТаблицаФайловНаДиске.Колонки.Добавить("Расширение");
	ТаблицаФайловНаДиске.Колонки.Добавить("СтатусПроверки");
	ТаблицаФайловНаДиске.Колонки.Добавить("Количество");
	ТаблицаФайловНаДиске.Колонки.Добавить("Отредактировал");
	ТаблицаФайловНаДиске.Колонки.Добавить("ДатаРедактирования");
	ТаблицаФайловНаДиске.Колонки.Добавить("ВремяИзменения");
	// + #s3 Иванов А.Б. 12.01.2021
	//ТаблицаФайловНаДиске.Колонки.Добавить("Размер");                                                                        
	ТаблицаФайловНаДиске.Колонки.Добавить("РазмерВ1с");
	ТаблицаФайловНаДиске.Колонки.Добавить("РазмерВТомеХраненияФайлов");
	// - #s3 Иванов А.Б. 12.01.2021
	
	Возврат ТаблицаФайловНаДиске;
КонецФункции // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Процедура ТомаХраненияФайлов_ОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверяемыеРеквизиты.Добавить("s3_АдресХранилища");
	ПроверяемыеРеквизиты.Добавить("s3_ИмяПрефикса");
	ПроверяемыеРеквизиты.Добавить("s3_ИдентификаторКлючаДоступа");
	ПроверяемыеРеквизиты.Добавить("s3_СекретныйКлюч");
	ПроверяемыеРеквизиты.Добавить("s3_Регион");
	
	ЭтоРабочаяБаза = s3_ЭтоРабочаяБаза();
	
	Если ЭтоРабочаяБаза Тогда
		
		ПроверяемыеРеквизиты.Добавить("s3_ИмяПрефиксаРабочаяБаза");	
		
		Если Источник.s3_ИмяПрефикса <> Источник.s3_ИмяПрефиксаРабочаяБаза Тогда
			
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Ошибка! В Рабочей базе должно совпадать Имя префикса [%1] 
				|и Имя префикса рабочая база [%2] '");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Источник.s3_ИмяПрефикса, Источник.s3_ИмяПрефиксаРабочаяБаза);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "s3_ИмяПрефикса", "Объект");
			
		КонецЕсли;
		
	Иначе
		
		Если Источник.s3_ИмяПрефикса = Источник.s3_ИмяПрефиксаРабочаяБаза Тогда
			
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Ошибка! В КОПИИ базы НЕ должны совпадать Имя префикса [%1] 
				|и Имя префикса рабочая база [%2] '");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Источник.s3_ИмяПрефикса, Источник.s3_ИмяПрефиксаРабочаяБаза);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "s3_ИмяПрефикса", "Объект");
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Процедура ИзменитьИмяПрефиксаВТомахХраненияФайловЕслиЭтоКОПИЯ() Экспорт
	
	ЭтоРабочаяБаза = s3_ЭтоРабочаяБаза();
	
	Если ЭтоРабочаяБаза Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТомаХраненияФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
	|ГДЕ
	|	НЕ ТомаХраненияФайлов.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТомаХраненияФайлов.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	пСпецСимволРазделитель = "_TEST_";
	пТекущаяДатаСеанса = ТекущаяДатаСеанса();
	пПостфиксДляПрефикса = пСпецСимволРазделитель + Формат(пТекущаяДатаСеанса, "ДФ=ddMMyyyy_hhmmss");
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		s3_ИмяПрефиксаНовое = СпрОбъект.s3_ИмяПрефикса; 
		
		ПозСпецСимвола = СтрНайти(s3_ИмяПрефиксаНовое, пСпецСимволРазделитель);
		Если ПозСпецСимвола > 0 Тогда
			s3_ИмяПрефиксаНовое = Лев(s3_ИмяПрефиксаНовое, ПозСпецСимвола - 1);	
		КонецЕсли;

		s3_ИмяПрефиксаНовое = s3_ИмяПрефиксаНовое + пПостфиксДляПрефикса;
		
		СпрОбъект.s3_ИмяПрефикса = s3_ИмяПрефиксаНовое;
		СпрОбъект.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры // - #s3 Иванов А.Б. 12.01.2021

// + #s3 Иванов А.Б. 12.01.2021
Функция s3_ЭтоРабочаяБаза() Экспорт
	Возврат Не БлокировкаРаботыСВнешнимиРесурсами.РаботаСВнешнимиРесурсамиЗаблокирована();	
КонецФункции // - #s3 Иванов А.Б. 12.01.2021