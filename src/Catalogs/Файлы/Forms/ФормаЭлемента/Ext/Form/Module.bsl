
// + #s3 Иванов А.Б. 12.01.2021
&НаСервере
&ИзменениеИКонтроль("ПриСозданииНаСервере")
Процедура s3_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФайлОснование = Параметры.ФайлОснование;
	
	Если Параметры.Свойство("ОткрытьЗакладкуЭП") Тогда
		
		ОткрытьЗакладкуЭП = Параметры.ОткрытьЗакладкуЭП;
		
		Если ОткрытьЗакладкуЭП Тогда
			Элементы.ГруппаДополнительныеДанныеСтраницы.ТекущаяСтраница
			 = Элементы.ГруппаЭП;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуЗадачи") Тогда
		ОткрытьЗакладкуЗадачи = Параметры.ОткрытьЗакладкуЗадачи;
	КонецЕсли;
	
	Если Параметры.Свойство("УстановитьТолькоПросмотр") И Параметры.УстановитьТолькоПросмотр = Истина Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		РазрешеноРедактирование = Ложь;
	КонецЕсли;
	
	Если НЕ Параметры.ФайлОснование.Пустая() И Объект.ТекущаяВерсия.Пустая() Тогда
		
		Элементы.ИконкаФайлаБольшая.Видимость = Ложь;
		Элементы.ИконкаФайлаБольшаяНаОсновании.Видимость = Истина;
		ИндексКартинкиНаОсновании = Параметры.ФайлОснование.ИндексКартинки;
		
		ЗаполнитьПараметрыКарточки(Параметры.ФайлОснование);
		
		Если Параметры.ФайлОснование.ТекущаяВерсия.ТипХраненияФайла 
			= Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			НетФайлаШаблона = Ложь;
			ПолныйПуть = "";
			
			Если НЕ Параметры.ФайлОснование.ТекущаяВерсия.Том.Пустая() Тогда
				
				ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(Параметры.ФайлОснование.ТекущаяВерсия.Том)
					+ Параметры.ФайлОснование.ТекущаяВерсия.ПутьКФайлу;
				#Удаление
				Файл = Новый Файл(ПолныйПуть);
				НетФайлаШаблона = Не Файл.Существует();
				#КонецУдаления
				#Вставка 
				// + #s3 Иванов А.Б. 12.01.2021
				пСсылкаНаТом = Параметры.ФайлОснование.ТекущаяВерсия.Том;
				НетФайлаШаблона = НЕ s3_API.ФайлСуществуетВТоме(пСсылкаНаТом, ПолныйПуть);
				// - #s3 Иванов А.Б. 12.01.2021				
				#КонецВставки				
				
			Иначе
				НетФайлаШаблона = Истина;
			КонецЕсли;
			
			Если НетФайлаШаблона Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru ='Отсутствует файл (""%1"") у шаблона.'"),
					ПолныйПуть);
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.Автор <> ТекущийПользователь Тогда
		Элементы.ФормаУдалить.Доступность = Ложь;
	КонецЕсли;	
	
	Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		Элементы.ДатаСоздания.ТолькоПросмотр = Ложь;
		Элементы.Владелец.ТолькоПросмотр = Ложь;
	Иначе	
		Элементы.Владелец.ТолькоПросмотр = Истина;
		Элементы.Владелец.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	КолонкиМассив = Новый Массив;
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ЭлектронныеПодписи").Колонки Цикл
		КолонкиМассив.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	ОписаниеКолонокТаблицыПодписей = Новый ФиксированныйМассив(КолонкиМассив);
	
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных 
		= ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтозаполнениеФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов");
	ВставлятьШКвMSWordнаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ИспользоватьШК = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	
	Если Параметры.Свойство("РежимСоздания") Тогда 
		РежимСоздания = Параметры.РежимСоздания;
	КонецЕсли;
	
	Если Параметры.Ключ = Неопределено Или Параметры.Ключ.Пустая() Тогда
		
		НовыйФайл = Истина;
		
		Если Параметры.ЗначениеКопирования.Пустая() Тогда
			Объект.ВладелецФайла = Параметры.ВладелецФайла;
		Иначе
			Объект.ТекущаяВерсия = Справочники.ВерсииФайлов.ПустаяСсылка();
			Параметры.ФайлОснование = Параметры.ЗначениеКопирования;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокОснование = Параметры.ФайлОснование;
	Если Не ДокОснование.Пустая() Тогда
		
		Объект.ПолноеНаименование = ДокОснование.ПолноеНаименование;
		Объект.Наименование = Объект.ПолноеНаименование;
		Объект.ХранитьВерсии = ДокОснование.ХранитьВерсии;
		
		// копирование категорий
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(ДокОснование);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование 
					= РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		// копирование проекта
		Если ВестиУчетПоПроектам Тогда 
			Объект.Проект = ДокОснование.Проект;
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеФайлаКорректны = Ложь;
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
		
		Если ДанныеФайла.СтатусРаспознаванияТекста = "Распознано" Тогда
			Распознан = Истина;
		КонецЕсли;
		
		Если ДанныеФайла.СтатусИзвлеченияТекста = "Извлечен" Тогда
			ИзвлеченТекст = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			Элементы.ЗаполнитьДаннымиВладельца.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТипВладельца = ТипЗнч(Объект.ВладелецФайла);
	Элементы.Владелец.Заголовок = ТипВладельца;
	
	НовыйФайлЗаписан = Ложь;
	
	// Обработчик подсистемы "Свойства"
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаСвойства");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Основание = ПараметрыФайлОснование;
	//Копирование дополнительных реквизитов основания 
	Если ЗначениеЗаполнено(Основание) 
		И ТипЗнч(Основание) = Тип("СправочникСсылка.Файлы")
		И ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		
		Для Каждого Реквизит Из Основание.ДополнительныеРеквизиты Цикл
			СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
			МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				НоваяСтрока = МассивСтрок[0];
				ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.Значение;
			КонецЕсли;
		КонецЦикла;
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если Параметры.Свойство("КарточкаОткрытаПослеСозданияФайла") Тогда
		Если Параметры.КарточкаОткрытаПослеСозданияФайла Тогда
			Попытка
				ЗаблокироватьДанныеФормыДляРедактирования();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ОбновитьПолныйПуть();
		Элементы.СубъектыПерсональныхДанных.ТолькоПросмотр = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Истина;
	Иначе 
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
	КонецЕсли;
	ОбновитьПредставлениеВладельца();
	
	Если Не Параметры.ФайлОснование.Пустая() Тогда
		ФайлОснованиеПодписан = Параметры.ФайлОснование.ПодписанЭП;
	КонецЕсли;
	
	Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		ЗаполнитьСписокПодписей();
	КонецЕсли;
	
	Если ЭлектроннаяПодпись.ИспользоватьШифрование() Тогда
		ЗаполнитьСписокШифрования();
	КонецЕсли;
	
	Если НЕ Параметры.ФайлОснование.Пустая() И Объект.ТекущаяВерсия.Пустая() Тогда
		Объект.ШаблонОснованиеДляСоздания = Параметры.ФайлОснование;
	КонецЕсли;
	
	// Чтение категорий данных
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		Элементы.ДекорацияПояснение.Видимость = Ложь;
		Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ИначеЕсли ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ВнутренниеДокументы")
			ИЛИ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ВходящиеДокументы")
			ИЛИ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект.ВладелецФайла, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
			Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий.Видимость = Ложь;
			Элементы.СписокКатегорийДанныхВывестиСписок.Видимость = Ложь;
			Элементы.СписокКатегорийДанныхОткрытьСписокОбъектовСВыбраннымиКатегориями.Видимость = Ложь;
			Элементы.СписокКатегорийДанных.ИзменятьСоставСтрок = Ложь;
			Элементы.ДекорацияПояснение.Видимость = Истина;
			Элементы.ДекорацияПояснение.Заголовок = СтрШаблон(
				НСтр("ru = 'Данный файл прикреплен к документу ""%1"".
				|В списке приведены категории документа.'"),
				Объект.ВладелецФайла.Заголовок);
			Элементы.ГруппаСтатусы.Видимость = Ложь;
		Иначе
			Элементы.Категории.Видимость = Ложь;
		КонецЕсли;
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных");
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;		
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") 
		И ЗначениеЗаполнено(Объект.ВладелецФайла)
		И Объект.ВладелецФайла.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
		Если Объект.Ссылка.Пустая() Тогда 
			Объект.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВладелецФайла, "Проект");
		КонецЕсли; 
		Элементы.Проект.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	СписокРасширенийТекстовыхФайлов = ФайловыеФункции.ПолучитьСписокРасширенийТекстовыхФайлов();
	Если ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(СписокРасширенийТекстовыхФайлов, Объект.ТекущаяВерсияРасширение) Тогда
		
		Если ЗначениеЗаполнено(Объект.ТекущаяВерсия) Тогда
			
			КодировкаЗначение = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(Объект.ТекущаяВерсия);
			
			СписокКодировок = РаботаСоСтроками.ПолучитьСписокКодировок();
			ЭлементСписка = СписокКодировок.НайтиПоЗначению(КодировкаЗначение);
			Если ЭлементСписка = Неопределено Тогда
				Кодировка = КодировкаЗначение;
			Иначе
				Кодировка = ЭлементСписка.Представление;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Кодировка) Тогда
			Кодировка = НСтр("ru='По умолчанию'");
		КонецЕсли;
		
	Иначе
		Элементы.Кодировка.Видимость = Ложь;
	КонецЕсли;
	
	ДоступностьРедактированияПоСостояниюБП = Истина;
	ЭтоБизнесПроцесс = ОбщегоНазначения.ЭтоБизнесПроцесс(Объект.ВладелецФайла.Метаданные());
	Если ЭтоБизнесПроцесс Тогда
		СостояниеБП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВладелецФайла, "Состояние");
		Если СостояниеБП <> Неопределено
			И СостояниеБП = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			ДоступностьРедактированияПоСостояниюБП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов")
	   И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект.ВладелецФайла) Тогда 
		Элементы.ЯвляетсяОригиналом.Видимость = Истина;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ЯвляетсяОригиналом = Делопроизводство.ФайлЯвляетсяОригиналом(Объект.Ссылка);
		КонецЕсли;
		НачальныйЯвляетсяОригиналом = ЯвляетсяОригиналом;
		
		// доступность переключателя Это оригинал
		Если Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить()
			И Не РольДоступна("ПолныеПрава") Тогда 
			ДоступныеПоля = Новый Массив; 
			НедоступныеПоля = Новый Массив; 
		
			Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(
				Объект.ВладелецФайла.ПолучитьОбъект(),
				ДоступныеПоля, НедоступныеПоля);
			
			ДоступностьПоляОригинал = (ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено) 
				И (ДоступныеПоля.Найти("ДобавлениеФайлов") <> Неопределено);
				
			Элементы.ЯвляетсяОригиналом.ТолькоПросмотр = Не ДоступностьПоляОригинал;
		КонецЕсли;
	Иначе
		Элементы.ЯвляетсяОригиналом.Видимость = Ложь;
	КонецЕсли;
	
	// Параметры оповещения
	Параметры.Свойство("ПараметрыОповещения", ПараметрыОповещения);
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
			
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РазрешеноРедактирование = Истина;
	КонецЕсли;	
	
	КешИнформации = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	КешИнформации.Объект = Объект.Ссылка;
	КешИнформации.Прочитать();
	
	// Картинка Взаимодействие
	Элементы.КартинкаВзаимодействие.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	Если КешИнформации.ЕстьЗадачи Тогда 
		СтатусВзаимодействия = 1;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'По файлу выполняются задачи'");
	Иначе	
		СтатусВзаимодействия = 0;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'По файлу нет выполняющихся задач'");
	КонецЕсли;
	
	Элементы.КартинкаЭП.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	ОбзорДокумента.ВывестиКартинкуЭП(ЭтаФорма);
	
	// Картинка Категории
	Элементы.КартинкаКатегории.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'");
	Иначе
		СтатусКатегории = 0;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'");
	КонецЕсли;	
	
	// Картинка контроль
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
	// Картинка форум
	ОбзорДокумента.ВывестиКартинкуФорума(ЭтаФорма);
	
	АвтовизуализацияЭП = ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП");
	Элементы.ФормаСоздатьШтампПодписи.Видимость 
		= АвтовизуализацияЭП И Объект.ПодписанЭП И ЗначениеЗаполнено(Объект.Ссылка)
			И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект.ВладелецФайла);

КонецПроцедуры // - #s3 Иванов А.Б. 12.01.2021